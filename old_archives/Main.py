# Pacotes importados para o projeto
import Menu
from Caixa import sistema


# FunÃ§Ã£o principal
# Dividada em loops diferentes para cada ciclo de operaÃ§Ãµes
#   1Âº loop permite login e cadastro de novos clientes
#   2Âº loop coleta todas as contas do cliente que efetuou o login e permite escolha de 1 para operaÃ§Ãµes bancÃ¡rias, tambÃ©m permite adicionar novas contas para cliente
#   3Âº loop permite realizaÃ§Ã£o de operaÃ§Ãµes bancÃ¡rias e ao final saÃ­da da execuÃ§Ã£o do programa exibindo extrato
def main() -> int:
    # VariÃ¡veis globais
    caixa = sistema()
    entrada_cpf = ""
    entrada_conta = 0

    # 1Âº loop
    while True:
        Menu.iniciar()

        try:
            entrada_iniciar = int(input())

        except ValueError:
            ("ðŸš«[ERRO] Valor incorreto, por favor retorne um valor vÃ¡lido")

        else:
            # Caso para efetuar login do usuÃ¡rio usando o cpf cadastrado
            if entrada_iniciar == 1:
                try:
                    Menu.login()
                    entrada_cpf: str = input()

                except ValueError:
                    ("ðŸš«[ERRO] Cadastro nÃ£o encontrado")

                else:
                    if caixa.loginCliente(entrada_cpf):
                        break

            # Caso para efetuar cadastro de um novo cliente
            elif entrada_iniciar == 2:
                Menu.cadastro(caixa)

            # Caso de saÃ­da
            elif entrada_iniciar == 3:
                print("OperaÃ§Ãµes finalizadas obrigado por usar o sistema")
                return 0  # Retorno para funÃ§Ã£o main()

    # 2Âº loop
    while True:
        # AtribuiÃ§Ã£o de valor para variÃ¡vel global que controla em qual conta as operaÃ§Ãµes estÃ£o sendo realizadas
        entrada_conta = Menu.contas(cliente=caixa.clientes[entrada_cpf], sistema=caixa)
        break

    # 3Âº loop
    while True:
        Menu.operacoes(caixa.clientes[entrada_cpf].contas[entrada_conta - 1])

        try:
            operacao_atual = int(input())

        except ValueError:
            print("ðŸš«[ERRO] Valor incorreto, por favor retorne um valor vÃ¡lido")

        else:
            # OpÃ§Ã£o que gera um depÃ³sito no caixa
            if operacao_atual == 1:
                # os.system('cls') # Limpa o terminal
                resultado = caixa.depositar(
                    caixa.clientes[entrada_cpf].contas[entrada_conta - 1]
                )
                caixa.extrato += resultado["valor_deposito"]
                caixa.saldo = resultado["valor_saldo"]

            # OpÃ§Ã£o que derruba um saque caso o limite diÃ¡rio tenha sido atingido
            elif operacao_atual == 2 and caixa.saques_efetuados >= caixa.SAQUES_DIARIOS:
                print("\nðŸš«[ERRO] Limite de saques diÃ¡rios atingido\n")

            # OpÃ§Ã£o que gera um saque
            elif operacao_atual == 2:
                caixa.saques_efetuados += 1
                # os.system('cls') # Limpa o terminal
                resultado = caixa.sacar(
                    caixa.clientes[entrada_cpf].contas[entrada_conta - 1]
                )
                caixa.extrato += resultado["valor_saque"]
                caixa.saldo = resultado["valor_saldo"]

            # OpÃ§Ã£o que gera o extrato
            elif operacao_atual == 3:
                # os.system('cls') # Limpa o terminal
                caixa.extrato += f"\nSALDO FINAL: {caixa.saldo}"
                caixa.extrato += f"\n{'='*60}"
                print(caixa.extrato)
                break


main()
